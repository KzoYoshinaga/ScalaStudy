package start1



class Scala8 {

  /* 2.6 リテラル
   */

  /* 2.6.1 整数リテラル
   *
   * base 10 : 0, 1, 321
   * base 16 : 0xFF, 0x1a3b
   * base 8  : 013, 077
   *
   * Int型リテラル  : サフィックスがない場合Int型リテラルと判断される
   * Long型リテラル : リテラルの末尾に L または l を付与
   *
   * 整数リテラルの有効な値は値を代入する変数の型によって決まる
   *
   *       最小値  最大値
   * Long  -2^63   2^63 - 1  // signed   64bit 8Byte
   * Int   -2^31   2^31 - 1  // signed   32bit 4Byte
   * Short -2^15   2^15 - 1  // signed   16bit 2Byte
   * Char   0      2^16 - 1  // unsigned 16bit 2Byte
   * Byte  -2^7    2^7  - 1  // signed   8bit  1Byte
   *
   * val i = 1234567891234556789  // エラー Intリテラルと判断され最大値オーバー
   * val b: Byte = 128            // エラー Byte型の最大値を127を超えている
   */

  /* 2.6.2 浮動少数リテラル
   *
   * Float型リテラル  : リテラルの末尾に F または f を付与
   * Double型リテラル : サフィックスがない場合Double型リテラルと判断される
   *                    任意で D または d を付与できる
   *
   * Float  : 32bit 4Byte (単精度２進浮動少数点数)
   * Double : 64bit 8Byte (倍精度２進浮動少数点数)
   *
   * 指数なし浮動少数リテラル
   * 0.
   * .0
   * 0.0
   * 3.
   * 3.14
   * .14
   * 0.14
   *
   * 指数あり浮動少数リテラル
   * 3e5
   * 3E5
   * 3.e5
   * 3.E5
   * 3.e+5
   * 3.3-5
   * 3.14e-5
   * 3.14e-5f
   * 3.143-5F
   * 2.14e-5d
   * 2.142-5D
   */

  /* ブールリテラル
   *
   * Boolean : true, false
   */

  /* 2.6.4 文字リテラル
   *
   * 文字リテラル: シングルクウォート(')で囲まれた印字可能なUnicode文字、またはエスケープシーケンス
   *               ０～２５５までのUnicode値をもつ文字は、８進数のエスケープで表現できる
   * e.g.
   * 'A'
   * '\u0041' // Unicodeで 'A'
   * '\n'
   * '\012'   // 8進で '\n'
   * '\t'
   *
   * エスケープシーケンス
   *      Unicode  Semantic
   * \b : \u0008   (BS) バックスペース
   * \t : \u0009   (HT) 水平タブ
   * \n : \u000a   (NL) 改行、ニューライン
   * \f : \u000c   (FF) 改ページ
   * \r : \u000d   (CR) 復帰、リターン
   * \" : \u0022   (")  ダブルクウォート
   * \' : \u0027   (') シングルクウォート
   * \\ : \u00a5   (\) バックスラッシュ
   */

  /* 2.6.5 文字列リテラル
   *
   * 文字列リテラル: (")ダブルクウォートで囲まれた文字シーケンス
   *                 または３つのダブルクウォートで囲まれた文字シーケンス("""...""")
   *
   * 文字シーケンスに使用可能な文字は文字リテラルと同じ
   *
   * ダブルクウォート記号が文字シーケンスに現れる場合は (\) でエスケープする必要がある
   *
   * 複数行文字リテラル : ("""...""")
   *                      (') や (") など任意の文字を含めることができる
   *                      (""") は含めることが出来ない
   *                      (\) を使った無効なUnicode、及び無効なエスケープシーケンスに対して便利 e.g. 正規表現
   *                      エスケープシーケンスが含まれていてもエスケープシーケンスとは解釈されない
   * e.g.
   *
   * """Programming\nScala"""
   *
   * """He exclaimed, "Scala is great!" """
   *
   *  """First line\n
   * Second line \t
   *
   * Forrth line"""
   *
   */

  /* 2.6.6 シンボルリテラル
   *
   * シンボル: "インターン"された文字列で、同じ名前(同じ文字シーケンス)を持つ２つのシンボルは、
   *           メモリ上で同じオブジェクトを実際に指す
   *
   * シンボルリテラル : シングルクウォートの後に文字が１文字、その後に０個以上の数字または文字が続く
   *                    (^'[a-zA-Z][a-zA-Z0-9]*$)
   */

  val firstSymbol = 'symbol
  val secondSymbol = 'symbol // 同じSymbolオブジェクトを指すenum みたいなもの？

}